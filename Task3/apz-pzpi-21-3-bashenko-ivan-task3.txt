1 Опис прийнятих інженерних рішень

Для створення програмного забезпечення для IoT-пристрою використовувався симулятор Wokwi. Програмний код для пристрою був розроблений мовою програмування C++. Цей IoT-пристрій є автоматом швидкого приготування їжі, який може готувати та подавати різні страви за допомогою кількох сервомоторів, звукових сигналів і світлових індикаторів. Пристрій дозволяє користувачам замовляти страви через сервер, після чого автомат обробляє замовлення та готує страву відповідно до вказаних параметрів. Використовуючи три сервомотори, автомат виконує обертання для приготування та подання їжі. Світлодіоди сигналізують про процес приготування, готовність страви та інші стани, а динамік забезпечує звукові сигнали для інформування про готовність страви чи про помилки. Склад пристрою включає мікроконтролер ESP32, три сервомотори для приготування, один сервомотор для подання їжі, кнопку, динамік та світлодіоди (рис. 1).

2 Пояснення програмного коду	

Після активації пристрій автоматично підключається до WiFi-мережі (див. додаток А). Після цього він створює вебсервер на порту 80, який слухатиме вхідні HTTP-запити. Користувач може замовити приготування страви через сервер, вказуючи ідентифікатор страви та кількість. Після отримання запиту, пристрій починає обробку в методі handleOrderRequest та виконує приготування в handleDishPreparation, а потім чекає на натискання кнопки для подачі страви через метод dispenseDish, прив’язаний до BUTTON_PIN. Код методу handleOrderRequest наступний:
1 void handleOrderRequest() {
2   if (server.hasArg("dish") && server.hasArg("quantity")) {
3     String dishId = server.arg("dish");
4     int quantity = server.arg("quantity").toInt();
5     if (isValidDishId(dishId) && quantity > 0) {
6       DishConfig dish = getDishConfigById(dishId);
7       Serial.print("Preparing ");
8       Serial.print(dish.name);
9       Serial.print(" x");
10      Serial.println(quantity);
11      handleDishPreparation(dish, quantity);
12      server.send(200, "text/plain", "Dish prepared");
13    } else {
14      handleUnsupportedDish();
15      server.send(200, "text/plain", "Unsupported Dish Type");
16    }
17  } else {
18    server.send(400, "text/plain", "Bad Request");
19  }
20 }
У методі handleDishPreparation оберти сервомоторів виконуються згідно з налаштуваннями страви (див. додаток Б). Після завершення приготування, пристрій сигналізує про готовність страви світлодіодом та звуковим сигналом. Метод handleDishPreparation наступний:
1 void handleDishPreparation(DishConfig dish, int quantity) {
2   turnOnYellowLight();
3   String quantityStr = "Qty: " + String(quantity);
4   displayMessage(dish.name, quantityStr.c_str());
5   for (int i = 0; i < dish.servo1Rotations * quantity; ++i) {
6     servo1.write(0);
7     servo2.write(0);
8     delay(750);
9     servo1.write(180);
10    servo2.write(180);
11    delay(750);
12  }
13  servo1.write(90);
14  servo2.write(90);
15  turnOffYellowLight();
16  beep(1, 500);
17  turnOnGreenLight();
18  displayMessage(dish.name, "Ready");
19 }
Після приготування страви, пристрій чекає на натискання кнопки для подачі страви. Метод dispenseDish виконує подачу страви за допомогою сервомотора, який обертається на 180 градусів для кожної одиниці страви. Код методу dispenseDish наступний:
1 void dispenseDish(DishConfig dish, int quantity) {
2   int rotations = quantity * 2;
3   for (int i = 0; i < rotations; ++i) {
4     servo3.write(0);
5     delay(1000);
6     servo3.write(180);
7     delay(1000);
8   }
9   servo3.write(90);
10  turnOffAllLights();
11  displayMessage("", "");
12 }
При натисканні кнопки, метод dispenseDish викликається для подачі приготованої страви, що дозволяє автомату ефективно та точно виконувати свої функції.


3 Діаграми

Для автомата швидкого приготування, тобто IoT-пристрою, було розроблено діаграму прецедентів (рис. 2). Акторами було призначено звичайного користувача системою та адміністратора. Виглядає діаграма наступним чином. Також була зроблена діаграма активності (рис. 3), яка показує повний процес роботи IoT-пристрою. Була зроблена діаграма взаємодії (рис. 4), яка дозволяє візуалізувати взаємодію всіх компонентів IoT-пристрою між собою та показує повний процес обробки команд між складовими програми. Також була зроблена діаграма пакетів (рис. 5) яка візуалізує організацію системи чи програми на рівні пакетів (групування модулів, класів або компонентів).